#+LATEX_COMPILER: xelatex
#+startup: latexpreview
#+startup: imagepreview

#+LATEX_HEADER: \hypersetup{colorlinks, allcolors=., colorlinks=true,linkcolor={blue!78!white}, urlcolor={purple}, filecolor={winered}}

#+LATEX_HEADER:\usepackage{xcolor} % to access the named colour LightGray
#+LATEX_HEADER:\definecolor{LightGray}{gray}{0.2}
#+LATEX_HEADER:\usepackage{minted}
#+LATEX_HEADER:\usemintedstyle{monokai}
#+LATEX_HEADER:\usepackage{fontspec}
#+LATEX_HEADER:\setmonofont{TeX Gyre Cursor}

üôèüôå ü§≤

* Setup
#+begin_src julia :session main :result output :export both :eval
  using Pkg;
  Pkg.activate("./")
  Pkg.add("PlotlyJS")
  Pkg.add("CSV")
  Pkg.add("DataFrames")
  Pkg.add("MLJ")
  Pkg.add("MLJMultivariateStatsInterface")
  Pkg.add("GLM")
  Pkg.add("Statistics")
  Pkg.add("StatsPlots")
  Pkg.add("Pingouin")
  Pkg.add("RCall")
#+end_src

#+RESULTS:

* PCA
** Importa√ß√£o de biblotecas
#+begin_src julia :session main :result output :export both :eval
  using PlotlyJS, CSV, DataFrames, MLJ, GLM, Statistics, StatsPlots, Pingouin, RCall
#+end_src

#+RESULTS:
: nothing

** Carregando o conjunto
(Fa√ßa o download do [[https://r-data.pmagunia.com/dataset/r-dataset-package-plm-cigar][conjunto]])
#+begin_src julia :session main :result output :export both :eval
  df = DataFrame(CSV.File("../data/csv/cigarro.csv"))
#+end_src

#+RESULTS:

#+begin_src julia :session main :result output
  describe(df)
#+end_src

#+RESULTS:
#+begin_example
9√ó7 DataFrame
 Row ‚îÇ variable  mean       min      median   max      nmissing  eltype
     ‚îÇ Symbol    Float64    Real     Float64  Real     Int64     DataType
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
   1 ‚îÇ state       26.8261     1        26.5     51           0  Int64
   2 ‚îÇ year        77.5       63        77.5     92           0  Int64
   3 ‚îÇ price       68.6999    23.4      52.3    201.9         0  Float64
   4 ‚îÇ pop       4537.11     319.0    3174.0  30703.3         0  Float64
   5 ‚îÇ pop16     3366.62     215.2    2315.3  22920.0         0  Float64
   6 ‚îÇ cpi         73.5967    30.6      62.9    140.3         0  Float64
   7 ‚îÇ ndi       7525.02    1322.57   6281.2  23074.0         0  Float64
   8 ‚îÇ sales      123.951     53.4     121.2    297.9         0  Float64
   9 ‚îÇ pimin       62.8993    23.4      46.4    178.5         0  Float64
#+end_example

** Coletando o nome das colunas
# [:sepal_width, :sepal_length, :petal_width, :petal_length]
#+begin_src julia :session main :result output :export both :eval
  features = names(df)
#+end_src

#+RESULTS:
: ["state", "year", "price", "pop", "pop16", "cpi", "ndi", "sales", "pimin"]

** Ajuste do PCA
#+begin_src julia :session main :result output :export both :eval
  # load and fit PCA
  PCA = @load PCA pkg="MultivariateStats"
  mach = machine(PCA(pratio=0.99), df[!, features])
  fit!(mach)
#+end_src

#+RESULTS:
: Machine{PCA,‚Ä¶}

#+begin_src julia :session main :result output :export both :eval
mach.report
#+end_src

#+RESULTS:
: (indim = 9, outdim = 2, tprincipalvar = 5.910045397463249e7, tresidualvar = 28231.829841166735, tvar = 5.912868580447365e7, mean = [26.82608695652174, 77.5, 68.69992753623197, 4537.113188405797, 3366.616086956522, 73.59666666666685, 7525.023021798268, 123.95086956521729, 62.89927536231881], principalvars = [3.810371638857024e7, 2.099673758606224e7])

** Plot
# [(
#+begin_src julia :session main :result output :export both :eval
  # compute explained variance for each dimension
  explained_variance = report(mach).principalvars
  explained_variance ./= sum(explained_variance)
  explained_variance .*= 100

  # transform data to get components
  components = MLJ.transform(mach, df[!, features])
  dimensions = Symbol.(names(components))
  components.state = df.state

  labels = attr(;
                [
                    dimensions[i] => "PC $i ($v%)"
                    for (i, v) in enumerate(round.(explained_variance, digits=1))
                        ]...
                            )
#+end_src

#+RESULTS:
: {"x2":"PC 2 (35.5%)","x1":"PC 1 (64.5%)"}


#+begin_src julia :session main :result output
  # plot
  plot(components, dimensions=dimensions, labels=labels, color=:state, kind="splom")
#+end_src

#+RESULTS:
: Output suppressed (line too long)

#+ATTR_HTML: :width 600px
[[file:~/EEL-USP/figs/PCA.png][file:./fig/PCA2.png]]

** Plot as duas dimens√µes principais

#+begin_src julia :session main :result output suppresses
  # load and fit PCA
  PCA = @load PCA pkg="MultivariateStats"
  mach = machine(PCA(maxoutdim=2), df[!, features])
  fit!(mach)

  components = MLJ.transform(mach, df[!, features])
  components.state = df.state
#+end_src

#+RESULTS:
: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51]

#+BEGIN_SRC julia :results file graphics :file dumb-image.png :output-dir fig :session main
  # plot
  plot(components, x=:x1, y=:x2, color=:state, mode="markers")

  png("./fig/dumb-img.png")
  #+end_src

  #+RESULTS:
  [[file:fig/dumb-image.png]]

  #+ATTR_HTML: :width 500px
  [[file:./fig/PCA.png]]

** Acessando dados de proje√ß√£o do modelo

#+begin_src julia :session main :result output
fitted_params(mach).projection
#+end_src

#+RESULTS:
: [-0.00022660730794453517 8.138139332352292e-6; 0.00042950477731241294 0.0016752927570293818; 0.0022441623903243575 0.008117097120859241; 0.7589883747514732 -0.2543107742652406; 0.5768527069043298 -0.16427874823015431; 0.0018288757066668463 0.007211488768880514; 0.30193537772185847 0.9529750052455501; -0.0007375890954606779 -0.0009274073696559082; 0.0018623359362422644 0.007456725647187477]

* Regress√£o linear baseado no PCA
** Formula
3, 4, 5, 7

#+begin_src julia :session main :result output
fm = @formula(sales ~ price + pop + pop16 + cpi + ndi)
#+end_src

#+RESULTS:
: price ~ pop + pop16 + cpi + ndi

** Linear

#+begin_src julia :session main :result output
linearRegressor = lm(fm, df[!, features])
#+end_src

#+RESULTS
#+begin_example
StatsModels.TableRegressionModel{LinearModel{GLM.LmResp{Vector{Float64}}, GLM.DensePredChol{Float64, CholeskyPivoted{Float64, Matrix{Float64}}}}, Matrix{Float64}}

price ~ 1 + pop + pop16 + cpi + ndi

Coefficients:
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                   Coef.   Std. Error      t  Pr(>|t|)     Lower 95%    Upper 95%
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
(Intercept)  -8.59138     0.938188     -9.16    <1e-18  -10.4318      -6.75094
pop           0.0105568   0.00115714    9.12    <1e-18    0.00828688   0.0128268
pop16        -0.0141704   0.00154389   -9.18    <1e-18   -0.017199    -0.0111417
cpi           0.611786    0.0293473    20.85    <1e-83    0.554216     0.669357
ndi           0.00426238  0.000231908  18.38    <1e-66    0.00380744   0.00471731
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
#+end_example

#+begin_src julia :session main :result output
dataset = Pingouin.read_dataset("mediation")
#+end_src

#+RESULTS:
#+begin_example
100√ó7 DataFrame
 Row ‚îÇ X      M      Y      Mbin   Ybin   W1       W2
     ‚îÇ Int64  Int64  Int64  Int64  Int64  Float64  Float64
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
   1 ‚îÇ     6      5      6      0      1     0.0       1.0
   2 ‚îÇ     7      5      5      1      0     0.1       1.0
   3 ‚îÇ     7      7      4      0      0     0.2       1.0
   4 ‚îÇ     8      4      8      0      1     0.3       1.0
   5 ‚îÇ     4      3      5      0      1     0.4       1.0
   6 ‚îÇ     4      4      7      0      1     0.5       1.0
   7 ‚îÇ     9      7      8      0      0     0.6       1.0
   8 ‚îÇ     5      0      4      1      1     0.7       1.0
   9 ‚îÇ     8      7      7      1      1     0.8       1.0
  10 ‚îÇ     4      3      4      0      0     0.9       1.0
  11 ‚îÇ     6      6      4      1      0     1.0       0.9
  12 ‚îÇ     8      4      3      1      1     1.1       0.9
  13 ‚îÇ     9      6     10      0      1     1.2       0.9
  14 ‚îÇ     6      6      6      1      0     1.3       0.9
  15 ‚îÇ     6      2      4      0      1     1.4       0.9
  16 ‚îÇ     3      4      3      1      1     1.5       0.9
  17 ‚îÇ     5      7      5      0      1     1.6       0.9
  18 ‚îÇ     4      3      4      1      1     1.7       0.9
  19 ‚îÇ     4      4      4      1      1     1.8       0.9
  20 ‚îÇ     6      8      6      0      1     1.9       0.9
  21 ‚îÇ     6      5      7      0      1     2.0       0.8
  22 ‚îÇ     9      8      6      0      0     2.1       0.8
  23 ‚îÇ     8      6      4      1      1     2.2       0.8
  24 ‚îÇ     4      3      4      1      1     2.3       0.8
  25 ‚îÇ     6      5      7      1      1     2.4       0.8
  26 ‚îÇ     5      7      8      0      1     2.5       0.8
  27 ‚îÇ     7      3      4      1      0     2.6       0.8
  28 ‚îÇ     6      4      4      0      0     2.7       0.8
  29 ‚îÇ     6      6      5      0      0     2.8       0.8
  30 ‚îÇ     7      8      7      0      1     2.9       0.8
  31 ‚îÇ     5      5      9      0      1     3.0       1.0
  32 ‚îÇ     6      6      7      1      0     2.95      1.0
  33 ‚îÇ     4      3      6      1      0     2.9       1.0
  34 ‚îÇ     4      4      6      1      1     2.85      1.0
  35 ‚îÇ     4      4      6      0      1     2.8       1.0
  36 ‚îÇ     7      6      7      0      0     2.75      1.0
  37 ‚îÇ     7      4      6      1      0     2.7       1.0
  38 ‚îÇ     5      1      0      0      0     2.65      1.0
  39 ‚îÇ     5      3      4      0      1     2.6       1.0
  40 ‚îÇ     5      4      7      1      0     2.55      1.0
  41 ‚îÇ     6      4      5      0      1     2.5       1.0
  42 ‚îÇ     4      2      2      1      1     2.45      1.0
  43 ‚îÇ     6      3      4      0      0     2.4       1.0
  44 ‚îÇ     6      5      3      1      0     2.35      1.0
  45 ‚îÇ     6      5      4      1      1     2.3       1.0
  46 ‚îÇ     6      6      7      1      0     2.25      1.0
  47 ‚îÇ     8      4      4      0      1     2.2       1.0
  48 ‚îÇ     5      3      3      0      1     2.15      1.0
  49 ‚îÇ     8      6      4      0      1     2.1       1.0
  50 ‚îÇ     4      3      5      0      1     2.05      1.0
  51 ‚îÇ     7      6      5      1      0     2.0       1.0
  52 ‚îÇ     7      6      7      1      1     1.95      1.0
  53 ‚îÇ     9      4      6      0      0     1.9       1.0
  54 ‚îÇ     5      7      7      0      1     1.85      1.0
  55 ‚îÇ     6      3      4      1      0     1.8       1.0
  56 ‚îÇ     0      4      6      0      0     1.75      1.0
  57 ‚îÇ     5      9     10      1      1     1.7       1.0
  58 ‚îÇ     6      2      2      0      1     1.65      1.0
  59 ‚îÇ    10     10      8      0      0     1.6       1.0
  60 ‚îÇ     4      3      6      1      1     1.55      1.0
  61 ‚îÇ     6      6      5      0      1     1.5       1.0
  62 ‚îÇ     8      8      9      1      1     1.45      1.0
  63 ‚îÇ     4      3      3      0      0     1.4       1.0
  64 ‚îÇ     7      5      5      1      1     1.35      1.0
  65 ‚îÇ     7      5      3      0      1     1.3       1.0
  66 ‚îÇ     7      5      5      0      1     1.25      1.0
  67 ‚îÇ     4      6      4      0      1     1.2       1.0
  68 ‚îÇ     4      5      7      0      0     1.15      1.0
  69 ‚îÇ     6      4      5      1      0     1.1       1.0
  70 ‚îÇ     6      4      4      0      1     1.05      1.0
  71 ‚îÇ     7      6      5      0      1     1.0       1.0
  72 ‚îÇ     4      5      3      1      0     0.95      1.0
  73 ‚îÇ     5      2      3      1      0     0.9       1.0
  74 ‚îÇ     4      3      4      1      1     0.85      1.0
  75 ‚îÇ     7      6     10      1      0     0.8       1.0
  76 ‚îÇ     5      5      4      0      0     0.75      1.0
  77 ‚îÇ     8      5      6      0      0     0.7       1.0
  78 ‚îÇ     5      2      4      0      1     0.65      1.0
  79 ‚îÇ     8      6      7      0      0     0.6       1.0
  80 ‚îÇ     8      7      7      1      1     0.55      1.0
  81 ‚îÇ     6      5      4      1      1     0.5       1.0
  82 ‚îÇ     4      2      1      0      0     0.45      1.0
  83 ‚îÇ     7      7      8      0      0     0.4       1.0
  84 ‚îÇ     6      6      5      0      0     0.35      1.0
  85 ‚îÇ     5      6      6      0      1     0.3       1.0
  86 ‚îÇ     6      3      3      1      0     0.25      1.0
  87 ‚îÇ     8      8      5      0      0     0.2       1.0
  88 ‚îÇ     9      6      9      1      1     0.15      1.0
  89 ‚îÇ     8      8      8      1      0     0.1       1.0
  90 ‚îÇ     9      7      8      0      0     0.05      1.0
  91 ‚îÇ     3      5      6      1      1     0.0       1.0
  92 ‚îÇ     7      6      5      1      0     0.0       1.0
  93 ‚îÇ     8      8      4      1      0     0.0       1.0
  94 ‚îÇ     7      3      6      0      1     1.0       1.0
  95 ‚îÇ     6      7      5      1      0     1.0       1.0
  96 ‚îÇ     5      2      2      1      0     1.0       1.0
  97 ‚îÇ     8      4      1      1      0     1.0       1.0
  98 ‚îÇ     7      4      5      0      0     1.0       1.0
  99 ‚îÇ     2      2      1      0      1     1.5       1.0
 100 ‚îÇ     5      4      5      0      0     2.0       1.0
#+end_example

#+begin_src julia :session main :result output
  function var_norm(df)
      norm = DataFrame([])
      for i in 1:1:length(names(df))
          push!(norm, only(Pingouin.normality(dataset[!,names(dataset)[i]], method="jarque_bera")))
      end
      return norm
  end
#+end_src

#+RESULTS:

#+begin_src julia :session main :result output
var_norm(dataset)
#+end_src

#+RESULTS:
#+begin_example
7√ó3 DataFrame
 Row ‚îÇ W          pval         normal
     ‚îÇ Float64    Float64      Bool
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
   1 ‚îÇ  1.42418   0.490618       true
   2 ‚îÇ  0.645823  0.724038       true
   3 ‚îÇ  0.261805  0.877303       true
   4 ‚îÇ 16.6735    0.000239553   false
   5 ‚îÇ 16.6675    0.000240265   false
   6 ‚îÇ  5.40923   0.0668961      true
   7 ‚îÇ 80.6857    3.01529e-18   false
#+end_example

* RCall.jl  

#+begin_src julia :session main :result output
using RCall
#+end_src

#+RESULTS:
: nothing

#+begin_src julia :session main :result output
R"install.packages("tidyverse")"
#+end_src

#+RESULTS:

#+begin_src julia :session main :result output
R"library("tidyverse")"
#+end_src

#+RESULTS:


#+begin_src julia :session main :result output
  rcall(:summary, df)
#+end_src

#+RESULTS:
#+begin_example
RObject{StrSxp}
     state            year          price             pop       
 Min.   : 1.00   Min.   :63.0   Min.   : 23.40   Min.   :  319  
 1st Qu.:15.00   1st Qu.:70.0   1st Qu.: 34.77   1st Qu.: 1053  
 Median :26.50   Median :77.5   Median : 52.30   Median : 3174  
 Mean   :26.83   Mean   :77.5   Mean   : 68.70   Mean   : 4537  
 3rd Qu.:40.00   3rd Qu.:85.0   3rd Qu.: 98.10   3rd Qu.: 5280  
 Max.   :51.00   Max.   :92.0   Max.   :201.90   Max.   :30703  
     pop16              cpi             ndi            sales      
 Min.   :  215.2   Min.   : 30.6   Min.   : 1323   Min.   : 53.4  
 1st Qu.:  781.2   1st Qu.: 38.8   1st Qu.: 3328   1st Qu.:107.9  
 Median : 2315.3   Median : 62.9   Median : 6281   Median :121.2  
 Mean   : 3366.6   Mean   : 73.6   Mean   : 7525   Mean   :124.0  
 3rd Qu.: 3914.3   3rd Qu.:107.6   3rd Qu.:11024   3rd Qu.:133.2  
 Max.   :22920.0   Max.   :140.3   Max.   :23074   Max.   :297.9  
     pimin       
 Min.   : 23.40  
 1st Qu.: 31.98  
 Median : 46.40  
 Mean   : 62.90  
 3rd Qu.: 90.50  
 Max.   :178.50  
#+end_example

#+begin_src julia :session main :result output
@rput df
#+end_src

#+RESULTS:

#+begin_src julia :session main :result output
  @rput df
#+end_src

#+RESULTS:


#+begin_src julia :session main :result output
  R"results <- prcomp(df, scale = TRUE)"
#+end_src

#+RESULTS:
#+begin_example
RObject{VecSxp}
Standard deviations (1, .., p=9):
[1] 2.21688330 1.40599575 1.03928640 0.91666148 0.32592256 0.23273513 0.12437548
[8] 0.10465820 0.03749865

Rotation (n x k) = (9 x 9):
               PC1         PC2          PC3         PC4         PC5         PC6
state  0.006039908 -0.12593436 -0.769795525  0.62511208 -0.02052309  0.01703221
year  -0.433474853 -0.07791952  0.065909160  0.09494610  0.64688904 -0.23582076
price -0.442082319 -0.05803319 -0.009607212 -0.03782633 -0.47224824 -0.15950251
pop   -0.086781139  0.69411497 -0.035894658  0.09872333 -0.02482254 -0.06172586
pop16 -0.101283835  0.68907447 -0.027767370  0.10540682  0.02212338 -0.01232135
cpi   -0.441493529 -0.08055844  0.050582901  0.06854448  0.32293748 -0.16994756
ndi   -0.438113641 -0.02076110  0.085396015  0.08075579 -0.03698130  0.88252942
sales  0.135935080 -0.06725820  0.625334009  0.75276761 -0.11829262 -0.06490979
pimin -0.439884608 -0.08147187  0.005034802 -0.00731268 -0.48717553 -0.32053376
               PC7          PC8           PC9
state  0.004086287  0.004978665  0.0010057813
year   0.545000337 -0.141711236 -0.0385359596
price  0.314458038  0.672546468  0.0031908068
pop   -0.031219077 -0.006246158 -0.7029927658
pop16  0.020911009 -0.002111455  0.7084866625
cpi   -0.770302437  0.253958411  0.0174734028
ndi    0.018986635 -0.109387184 -0.0354908116
sales  0.012027206  0.030742419 -0.0003364401
pimin -0.093761322 -0.670913845  0.0280459735
#+end_example

#+begin_src julia :session main :result output
@rget results
#+end_src

#+RESULTS:

#+begin_src julia :session main :result output
results
#+end_src

#+RESULTS:
: Output suppressed (line too long)

* Fontes:

https://plotly.com/julia/pca-visualization/
https://r-data.pmagunia.com/dataset/r-dataset-package-plm-cigar
