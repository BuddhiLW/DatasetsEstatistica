#+LATEX_COMPILER: xelatex
#+startup: latexpreview
#+startup: imagepreview

#+LATEX_HEADER: \hypersetup{colorlinks, allcolors=., colorlinks=true,linkcolor={blue!78!white}, urlcolor={purple}, filecolor={winered}}

#+LATEX_HEADER:\usepackage{xcolor} % to access the named colour LightGray
#+LATEX_HEADER:\definecolor{LightGray}{gray}{0.2}
#+LATEX_HEADER:\usepackage{minted}
#+LATEX_HEADER:\usemintedstyle{monokai}
#+LATEX_HEADER:\usepackage{fontspec}
#+LATEX_HEADER:\setmonofont{TeX Gyre Cursor}


* Setup
#+begin_src julia :session main :result output :export both :eval
  using Pkg;
  Pkg.activate("~/PP/MonitoriaEstatistica/")
  Pkg.add("PlotlyJS")
  Pkg.add("CSV")
  Pkg.add("DataFrames")
  Pkg.add("MLJ")
  Pkg.add("MLJMultivariateStatsInterface")
#+end_src

#+RESULTS:

üôèüôå ü§≤

* PCA
** Importa√ß√£o de biblotecas
#+begin_src julia :session main :result output :export both :eval
  using PlotlyJS, CSV, DataFrames, MLJ
#+end_src

#+RESULTS:
: nothing

** Carregando o conjunto
(Fa√ßa o download do [[https://r-data.pmagunia.com/dataset/r-dataset-package-plm-cigar][conjunto]])
#+begin_src julia :session main :result output :export both :eval
  df = DataFrame(CSV.File("../data/csv/cigarro.csv"))
  describe(df)
#+end_src

#+RESULTS:
#+begin_example
9√ó7 DataFrame
 Row ‚îÇ variable  mean       min      median   max      nmissing  eltype
     ‚îÇ Symbol    Float64    Real     Float64  Real     Int64     DataType
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
   1 ‚îÇ state       26.8261     1        26.5     51           0  Int64
   2 ‚îÇ year        77.5       63        77.5     92           0  Int64
   3 ‚îÇ price       68.6999    23.4      52.3    201.9         0  Float64
   4 ‚îÇ pop       4537.11     319.0    3174.0  30703.3         0  Float64
   5 ‚îÇ pop16     3366.62     215.2    2315.3  22920.0         0  Float64
   6 ‚îÇ cpi         73.5967    30.6      62.9    140.3         0  Float64
   7 ‚îÇ ndi       7525.02    1322.57   6281.2  23074.0         0  Float64
   8 ‚îÇ sales      123.951     53.4     121.2    297.9         0  Float64
   9 ‚îÇ pimin       62.8993    23.4      46.4    178.5         0  Float64
#+end_example

** Coletando o nome das colunas
# [:sepal_width, :sepal_length, :petal_width, :petal_length]
#+begin_src julia :session main :result output :export both :eval
  features = names(df)
#+end_src

#+RESULTS:
: ["state", "year", "price", "pop", "pop16", "cpi", "ndi", "sales", "pimin"]

** Ajuste do PCA
#+begin_src julia :session main :result output :export both :eval
  # load and fit PCA
  PCA = @load PCA pkg="MultivariateStats"
  mach = machine(PCA(pratio=0.99), df[!, features])
  fit!(mach)
#+end_src

#+RESULTS:
: Machine{PCA,‚Ä¶}

#+begin_src julia :session main :result output :export both :eval
mach.report
#+end_src

#+RESULTS:
: (indim = 9, outdim = 2, tprincipalvar = 5.910045397463249e7, tresidualvar = 28231.829841166735, tvar = 5.912868580447365e7, mean = [26.82608695652174, 77.5, 68.69992753623197, 4537.113188405797, 3366.616086956522, 73.59666666666685, 7525.023021798268, 123.95086956521729, 62.89927536231881], principalvars = [3.810371638857024e7, 2.099673758606224e7])
** Plot
# [(
#+begin_src julia :session main :result output :export both :eval
  # compute explained variance for each dimension
  explained_variance = report(mach).principalvars
  explained_variance ./= sum(explained_variance)
  explained_variance .*= 100

  # transform data to get components
  components = MLJ.transform(mach, df[!, features])
  dimensions = Symbol.(names(components))
  components.state = df.state

  labels = attr(;
                [
                    dimensions[i] => "PC $i ($v%)"
                    for (i, v) in enumerate(round.(explained_variance, digits=1))
                        ]...
                            )
#+end_src

#+RESULTS:
: {"x2":"PC 2 (35.5%)","x1":"PC 1 (64.5%)"}

#+begin_src julia :session main :result output
  # plot
  plot(components, dimensions=dimensions, labels=labels, color=:state, kind="splom")
#+end_src

#+RESULTS:
: Output suppressed (line too long)

#+ATTR_HTML: :width 600px
[[file:~/EEL-USP/figs/PCA.png][file:./fig/PCA2.png]]

** Plot as duas dimens√µes principais

#+begin_src julia :session main :result output suppresses
  # load and fit PCA
  PCA = @load PCA pkg="MultivariateStats"
  mach = machine(PCA(maxoutdim=2), df[!, features])
  fit!(mach)

  components = MLJ.transform(mach, df[!, features])
  components.state = df.state
#+end_src

#+BEGIN_SRC julia :results file graphics :file dumb-image.png :output-dir fig :session main
  # plot
  plot(components, x=:x1, y=:x2, color=:state, mode="markers")

  png("./fig/dumb-img.png")
  #+end_src

  #+RESULTS:
  [[file:fig/dumb-image.png]]

  #+ATTR_HTML: :width 500px
  [[file:./fig/PCA.png]]

** Acessando dados de proje√ß√£o do modelo

#+begin_src julia :session main :result output
fitted_params(mach).projection
#+end_src

#+RESULTS:


* Fontes:

https://plotly.com/julia/pca-visualization/
https://r-data.pmagunia.com/dataset/r-dataset-package-plm-cigar
